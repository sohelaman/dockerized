version: "3"

networks:
  skynet:
  gitea:
    external: false


volumes:
  mssqldata:


services:
  alpine:
    container_name: 'dockerized-alpine'
    hostname: 'dockerized-alpine'
    image: alpine:latest
    tty: true
    stdin_open: true
    networks:
      - skynet

  fpm:
    container_name: 'dockerized-fpm'
    image: 'sohelaman/dockerized-fpm:latest'
    hostname: 'dockerized-fpm'
    build:
      context: ./services/fpm
      args:
        - USE_BD_MIRRORS=${USE_BD_MIRRORS-false}
        - DOCKER_HOST_USER=${DOCKER_HOST_USER-john}
        - DOCKER_HOST_USER_ID=${DOCKER_HOST_USER_ID-1000}
        - DOCKER_HOST_GROUP_ID=${DOCKER_HOST_GROUP_ID-1000}
        - ADD_PHP_56=${ADD_PHP_56-false}
        - ADD_PHP_80=${ADD_PHP_80-true}
        - ADD_PHP_74=${ADD_PHP_74-true}
        - ADD_PHP_73=${ADD_PHP_73-true}
        - ADD_PHP_72=${ADD_PHP_72-false}
        - ADD_PHP_71=${ADD_PHP_71-false}
        - ADD_PHP_70=${ADD_PHP_70-false}
    extra_hosts:
      - "dockerhost:${DOCKER_HOST_IP}"
    restart: ${RESTART_FPM-no}
    tty: true
    volumes:
      - ${DOCUMENT_ROOT-./volumes/var/www/html}:/var/www/html
      - ${CACHE_DIR-./volumes/var/cachedir}:/var/cachedir
      - ./conf/php-overrides.ini:/etc/php/php-overrides.ini
      - ./services/fpm/config/php/ini/php5.6.ini:/etc/php/5.6/fpm/php.ini
      - ./services/fpm/config/php/ini/php8.0.ini:/etc/php/8.0/fpm/php.ini
      - ./services/fpm/config/php/ini/php7.4.ini:/etc/php/7.4/fpm/php.ini
      - ./services/fpm/config/php/ini/php7.3.ini:/etc/php/7.3/fpm/php.ini
      - ./services/fpm/config/php/ini/php7.2.ini:/etc/php/7.2/fpm/php.ini
      - ./services/fpm/config/php/ini/php7.1.ini:/etc/php/7.1/fpm/php.ini
      - ./services/fpm/config/php/ini/php7.0.ini:/etc/php/7.0/fpm/php.ini
    networks:
      - skynet

  apache:
    container_name: 'dockerized-apache'
    image: 'sohelaman/dockerized-apache:latest'
    hostname: 'dockerized-apache'
    build:
      context: ./services/apache
      args:
        - APACHE_PHP_VER=${APACHE_PHP_VER-7.4}
    ports:
      - "${APACHE_PORT-80}:80"
      - "${APACHE_PORT_SSL-443}:443"
    extra_hosts:
      - "dockerhost:${DOCKER_HOST_IP}"
    restart: ${RESTART_APACHE-no}
    tty: true
    volumes:
      - ./services/apache/conf/dockerized.conf:/etc/apache2/conf-enabled/dockerized.conf
      - ./conf/apache-vhosts.conf:/etc/apache2/sites-enabled/vhosts.conf
      - ${DOCUMENT_ROOT-./volumes/var/www/html}:/var/www/html
      - ${CACHE_DIR-./volumes/var/cachedir}:/var/cachedir
      - ${APACHE_LOG_DIR-./volumes/var/log/apache2}:/var/log/apache2
    networks:
      - skynet
    depends_on:
      - fpm

  nginx:
    container_name: 'dockerized-nginx'
    hostname: 'dockerized-nginx'
    image: 'sohelaman/dockerized-nginx:latest'
    build:
      context: ./services/nginx
      args:
        - NGINX_PHP_VER=${NGINX_PHP_VER-7.4}
    ports:
      - "${NGINX_PORT-80}:80"
      - "${NGINX_PORT_SSL-443}:443"
    extra_hosts:
      - "dockerhost:${DOCKER_HOST_IP}"
    tty: true
    restart: ${RESTART_NGINX-no}
    volumes:
      - ./services/nginx/conf/dockerized.conf:/etc/nginx/conf.d/dockerized.conf
      - ./conf/nginx-vhosts.conf:/etc/nginx/sites-enabled/vhosts.conf
      - ${DOCUMENT_ROOT-./volumes/var/www/html}:/var/www/html
      - ${CACHE_DIR-./volumes/var/cachedir}:/var/cachedir
      - ${NGINX_LOG_DIR-./volumes/var/log/nginx}:/var/log/nginx
    networks:
      - skynet
    depends_on:
      - fpm

  dotnet:
    container_name: 'dockerized-dotnet'
    image: 'sohelaman/dockerized-dotnet:latest'
    hostname: 'dockerized-dotnet'
    build:
      context: ./services/dotnet
      args:
        - DOCKER_HOST_USER=${DOCKER_HOST_USER-john}
        - DOCKER_HOST_USER_ID=${DOCKER_HOST_USER_ID-1000}
        - DOCKER_HOST_GROUP_ID=${DOCKER_HOST_GROUP_ID-1000}
    tty: true
    stdin_open: true
    ports:
      - "5000:5000"
      - "5001:5001"
    extra_hosts:
      - "dockerhost:${DOCKER_HOST_IP}"
    environment:
      - DOTNET_CLI_TELEMETRY_OPTOUT=true
      - DOCUMENT_ROOT=${DOCUMENT_ROOT-/var/www/html}
    volumes:
      - ${DOCUMENT_ROOT-./volumes/var/www/html}:/var/www/html
    networks:
      - skynet

  mysql:
    container_name: 'dockerized-mysql'
    hostname: 'dockerized-mysql'
    image: mysql:latest
    command: --default-authentication-plugin=mysql_native_password
    restart: ${RESTART_MYSQL-no}
    ports:
      - "${MYSQL_PORT-3306}:3306"
    volumes:
      - ${MYSQL_DATA_DIR-./volumes/var/lib/mysql}:/var/lib/mysql
      - ${MYSQL_LOG_DIR-./volumes/var/log/mysql}:/var/log/mysql
    environment:
      MYSQL_USER: ${MYSQL_USER-dockerized}
      MYSQL_PASSWORD: ${MYSQL_USER_PASS-dockerized}
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASS-root}
      MYSQL_DATABASE: ${MYSQL_DB-dockerized}
    networks:
      - skynet

  mariadb:
    container_name: 'dockerized-mariadb'
    hostname: 'dockerized-mariadb'
    image: mariadb:latest
    restart: ${RESTART_MARIADB-no}
    ports:
      - "${MARIADB_PORT-3306}:3306"
    volumes:
      - ${MARIADB_DATA_DIR-./volumes/var/lib/mariadb}:/var/lib/mysql
      - ${MARIADB_LOG_DIR-./volumes/var/log/mariadb}:/var/log/mysql
    environment:
      MYSQL_USER: ${MYSQL_USER-dockerized}
      MYSQL_PASSWORD: ${MYSQL_USER_PASS-dockerized}
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASS-root}
      MYSQL_DATABASE: ${MYSQL_DB-dockerized}
    networks:
      - skynet

  mssql:
    container_name: 'dockerized-mssql'
    hostname: 'dockerized-mssql'
    image: mcr.microsoft.com/mssql/server:latest
    ports:
      - "${MSSQL_PORT-1433}:1433"
    environment:
      ACCEPT_EULA: "Y"
      SA_PASSWORD: ${MSSQL_SA_PASSWORD-D0ckerized}
    volumes:
      - mssqldata:/var/opt/mssql
    networks:
      - skynet

  postgres:
    container_name: 'dockerized-postgres'
    hostname: 'dockerized-postgres'
    image: postgres
    restart: ${RESTART_POSTGRES-no}
    environment:
      POSTGRES_USER: ${POSTGRES_ROOT_USER-root}
      POSTGRES_PASSWORD: ${POSTGRES_ROOT_PASS-root}
    volumes:
      - ${POSTGRES_DATA_DIR-./volumes/var/lib/postgresql/data}:/var/lib/postgresql/data
    networks:
      - skynet

  couchdb:
    container_name: 'dockerized-couchdb'
    hostname: 'dockerized-couchdb'
    image: couchdb
    restart: ${RESTART_COUCHDB-no}
    ports:
      - "5984:5984"
    volumes:
      - ${COUCHDB_DATA_DIR-./volumes/data/couchdb}:/opt/couchdb/data
    environment:
      COUCHDB_USER: ${COUCHDB_ADMIN_USER-root}
      COUCHDB_PASSWORD: ${COUCHDB_ADMIN_PASSWORD-root}
    networks:
      - skynet

  mongodb:
    container_name: 'dockerized-mongodb'
    hostname: 'dockerized-mongodb'
    image: mongo
    restart: ${RESTART_MONGO-no}
    volumes:
      - ${MONGO_DATA_DIR-./volumes/data/mongodb}:/data/db
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USER-root}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASS-root}
    networks:
      - skynet

  mongo-express:
    container_name: 'dockerized-mongo-express'
    hostname: 'dockerized-mongo-express'
    image: mongo-express
    ports:
      - 8081:8081
    environment:
      ME_CONFIG_MONGODB_SERVER: mongo
      ME_CONFIG_MONGODB_ADMINUSERNAME: ${MONGO_ROOT_USER-root}
      ME_CONFIG_MONGODB_ADMINPASSWORD: ${MONGO_ROOT_PASS-root}
    networks:
      - skynet

  redis:
    container_name: 'dockerized-redis'
    hostname: 'dockerized-redis'
    restart: ${RESTART_REDIS-no}
    image: redis:alpine
    ports:
      - "${REDIS_PORT-6379}:6379"
    networks:
      - skynet

  memcached:
    container_name: 'dockerized-memcached'
    hostname: 'dockerized-memcached'
    image: memcached:alpine
    restart: ${RESTART_MEMCACHED-no}
    ports:
      - "${MEMCACHED_PORT-11211}:11211"
    networks:
      - skynet

  varnish:
    container_name: 'dockerized-varnish'
    image: 'sohelaman/dockerized-varnish:latest'
    hostname: 'dockerized-varnish'
    build:
      context: ./services/varnish
      args:
        - VARNISH_PORT=${VARNISH_PORT-8080}
        - VARNISH_MALLOC=${VARNISH_MALLOC-128M}
    ports:
      - "${VARNISH_PORT-8080}:${VARNISH_PORT-8080}"
    extra_hosts:
      - "dockerhost:${DOCKER_HOST_IP}"
    tty: true
    volumes:
      - ./services/varnish/config/default.vcl:/etc/varnish/default.vcl
    networks:
      - skynet

  ftp:
    container_name: 'dockerized-ftp'
    image: 'sohelaman/dockerized-ftp:latest'
    hostname: 'dockerized-ftp'
    build:
      context: ./services/ftp
      args:
        - FTP_USER=${FTP_USER-john}
        - FTP_PASS=${FTP_PASS-doe}
    tty: true
    restart: ${RESTART_FTP-no}
    # ports:
    #   - "20:20"
    #   - "21:21"
    # networks:
    #   - skynet
    network_mode: host
    extra_hosts:
      - "dockerhost:${DOCKER_HOST_IP}"
    volumes:
      - ${FTP_ROOT-./volumes/var/ftp}:/home/${FTP_USER-john}/ftp/files

  maildev:
    container_name: 'dockerized-maildev'
    hostname: 'dockerized-maildev'
    image: djfarrelly/maildev
    restart: ${RESTART_MAILDEV-always}
    ports:
      - "${MAILDEV_ADMIN_PORT-8088}:80"
      - "${MAILDEV_EMAIL_PORT-25}:25"
    networks:
      - skynet

  emby:
    container_name: 'dockerized-emby'
    hostname: 'dockerized-emby'
    image: emby/embyserver
    ports:
      - "8096:8096"
      - "8920:8920"
    volumes:
      - ${EMBY_CONFIG-./volumes/emby/config}:/config
      - ${SHARED_DISK1-./volumes/mnt/disk1}:/mnt/disk1
      - ${SHARED_DISK2-./volumes/mnt/disk2}:/mnt/disk2

  portainer:
    container_name: 'dockerized-portainer'
    hostname: 'dockerized-portainer'
    image: portainer/portainer
    restart: ${RESTART_PORTAINER-always}
    ports:
      - "${PORTAINER_PORT-9900}:9000"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ${PORTAINER_DATA_DIR-./volumes/data/portainer}:/data

  theia:
    container_name: 'dockerized-theia'
    hostname: 'dockerized-theia'
    image: theiaide/theia-php
    restart: ${RESTART_THEIA-no}
    ports:
      - "${THEIA_PORT-3030}:3000"
    volumes:
      - ${THEIA_WORKSPACES}:/home/workspaces
      - ${THEIA_WORKSPACE-./}:/home/project:cached

  gitea:
    container_name: dockerized-gitea
    image: gitea/gitea
    environment:
      - USER_UID=${DOCKER_HOST_USER_ID-1000}
      - USER_GID=${DOCKER_HOST_GROUP_ID-1000}
    restart: ${RESTART_GITEA-no}
    networks:
      - gitea
    volumes:
      - ${GITEA_DATA-./volumes/data/gitea}:/data
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
    ports:
      - "${GITEA_WEB_PORT-10080}:3000"
      - "${GITEA_SSH_PORT-10022}:22"

  void:
    container_name: 'dockerized-void'
    image: 'sohelaman/dockerized-void:latest'
    hostname: 'dockerized-void'
    build:
      context: ./services/void
      args:
        - DOCKER_HOST_USER=${DOCKER_HOST_USER-john}
        - DOCKER_HOST_USER_ID=${DOCKER_HOST_USER_ID-1000}
        - DOCKER_HOST_GROUP_ID=${DOCKER_HOST_GROUP_ID-1000}
    tty: true
    stdin_open: true
    restart: ${RESTART_VOID-always}
    ports:
      - "1111:1111"
      - "3333:3333"
      - "5555:5555"
      - "7777:7777"
      - "11235:11235"
      - "13579:13579"
      - "31415:31415"
    extra_hosts:
      - "dockerhost:${DOCKER_HOST_IP}"
    # dns:
    #   - 1.1.1.1
    #   - 8.8.8.8
    #   - 8.8.4.4
    environment:
      - DOCUMENT_ROOT=${DOCUMENT_ROOT-/var/www/html}
    volumes:
      - ${DOCUMENT_ROOT-./volumes/var/www/html}:/var/www/html
      - ${CACHE_DIR-./volumes/var/cachedir}:/var/cachedir
      - ${APACHE_LOG_DIR-./volumes/var/log/apache2}:/var/log/apache2
      - ${NGINX_LOG_DIR-./volumes/var/log/nginx}:/var/log/nginx
      - ./volumes/data/share:/data/share
    networks:
      - skynet

  test:
    container_name: 'dockerized-test'
    image: 'sohelaman/dockerized-test:latest'
    hostname: 'dockerized-test'
    build:
      context: ./services/test
      args:
        - DOCKER_HOST_USER=${DOCKER_HOST_USER-john}
        - DOCKER_HOST_USER_ID=${DOCKER_HOST_USER_ID-1000}
        - DOCKER_HOST_GROUP_ID=${DOCKER_HOST_GROUP_ID-1000}
    tty: true
    stdin_open: true
    extra_hosts:
      - "dockerhost:${DOCKER_HOST_IP}"
    environment:
      - DOCUMENT_ROOT=${DOCUMENT_ROOT-/var/www/html}
    volumes:
      - ${DOCUMENT_ROOT-./volumes/var/www/html}:/var/www/html
    networks:
      - skynet
